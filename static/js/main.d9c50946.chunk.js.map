{"version":3,"sources":["../../../src/canvas/pallete.ts","../../../src/canvas/constants.ts","../../../src/board/board.ts","../../../src/board/piece.ts","../../../src/faction/faction.ts","../../../src/game/index.ts","../../../src/game/game.ts","../../../src/views/index.ts","../../../src/views/checker-view.ts","../../src/constants.ts","../../../src/predictor/abstract-predictor.ts","../../../src/predictor/simple-predictor.ts","../../../../src/predictor/minmax-predictor/minmax-tree-node.ts","../../../../src/predictor/minmax-predictor/minmax-predictor.ts","../../../src/predictor/predictor-manager.ts","../../../src/predictor/index.ts","../../../src/canvas/abstract-canvas.ts","../../../../src/canvas/html-2d/zoom.ts","../../../../src/canvas/html-2d/rotate-y.ts","../../../../src/canvas/html-2d/offset-x.ts","../../../../src/canvas/html-2d/canvas.ts","../../../../src/canvas/html-2d/index.ts","../../../src/single/single-player-game.ts","../../../src/single/index.ts","../../../src/multi/multi-players-game.ts","../../../src/multi/index.ts","../../src/index.ts","../../src/utils.ts","pages/Home/index.tsx","components/FactionSlot/index.tsx","components/Room/index.tsx","hooks/useGlobalContext.tsx","hooks/useInvoke.ts","hooks/useConnectToServer.ts","pages/SingleRoom/index.tsx","hooks/useSlots.ts","components/Chess/SingleChessGame.ts","components/Chess/NetChessGame.ts","components/Chess/index.tsx","components/StepList/index.tsx","pages/Game/index.tsx","hooks/useGameStatus.ts","pages/NetConnection/index.tsx","components/NetRoomPreview/index.tsx","components/NetRoomCreator/index.tsx","pages/NetRoomList/index.tsx","hooks/useNetRooms.ts","pages/NetRoom/index.tsx","hooks/useNetRoomDetail.ts","App.tsx","serviceWorker.ts","index.tsx","../../../src/views/constants.ts","../../../src/board/index.ts","../../../src/views/abstract-element.ts","../../../src/canvas/index.ts","../../../src/faction/index.ts","../../../src/views/abstract-view.ts","../../../src/views/slot-element.ts","../../../src/calculator/in-out-calculator.ts","../../../src/calculator/index.ts","../../src/base.ts","../../src/message.ts","../../src/restapi.ts","../../../src/base/checker-view-gui.ts","../../../src/base/abstract-game.ts","../../../src/base/index.ts"],"names":["this","slots","x","y","a","Home","className","to","replace","FactionSlot","props","index","aiLevel","playerName","slotType","onChangeSlot","status","id","useMemo","showName","simple","normal","hard","showStatus","ClientStatus","Preparing","data-tip","data-for","data-event","place","type","effect","globalEventOff","clickable","onClick","Room","onMiddleButtonClick","middleButtonText","setSlot","map","slot","key","bind","undefined","defaultGlobalContext","gameMode","setGameMode","setSlots","networkParam","setNetworkParam","networkRoomParam","setNetworkRoomParam","GlobalContext","createContext","GlobalContextProvider","useState","context","Provider","value","children","useGlobalContext","useContext","useInvoke","server","clientId","path","data","Promise","reject","url","request","axios","post","then","axiosRes","res","code","STATUS_OK","toast","warn","message","autoClose","hideProgressBar","position","Error","useConnectToServer","globalContext","connect","resolve","socket","io","SOCKET_PATH","timeout","setTimeout","close","on","SYNC_CLIENT","clearTimeout","info","disconnect","useCallback","SingleRoom","history","useHistory","myIndex","setMyIndex","initFactionProps","newSlots","Array","from","newSlot","useSlots","startGame","SingleChessGame","canvas","chessProps","players","aiPlayers","myFactionId","forEach","push","factionId","difficulty","canvasElement","convert","events","onChessMove","onGameEnd","onGameStart","onGameWin","coord","steps","SinglePlayerCheckerGameGui","NetChessGame","MultiPlayersCheckerGameGui","Chess","mode","chessRef","useRef","useEffect","current","start","length","ref","width","height","StepList","contentRef","scrollTop","scrollHeight","step","faction","piece","getFactionId","Game","invoke","setStatus","mention","setMention","actions","setActions","moveStep","myFaction","MOVE_CHESS","coordinate","factionIdentity","useGameStatus","backUrl","onClose","NetConnection","inputServer","setInputServer","buttonText","setButtonText","connectToServer","catch","onChange","e","target","NetRoomPreview","onClickFreeSlot","roomInfo","onClickSlot","freeFactions","includes","name","NetRoomCreator","inputName","setInputName","onCreateRoom","onDisconnect","onClickBtn","NetRoomList","netRooms","rooms","setRooms","LIST_ROOMS_REQUEST","msg","SYNC_SERVER_ROOMS","removeEventListener","useNetRooms","roomId","useRedirect","createRoom","CREATE_ROOM","factions","iAmMaster","joinRoom","JOIN_ROOM_REQUEST","room","NetRoom","netRoomDetail","detail","setDetail","ROOM_DETAIL","SYNC_ROOM_DETAIL","isUndefined","isMaster","useNetRoomDetail","roomDetail","i","player","useNetSlots","startOrPrepare","START_GAME","prepare","isPrepared","PREPARE_GAME","useStartOrPrepare","useMiddleButtonText","leave","LEAVE_ROOM","isProcessing","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.d9c50946.chunk.js","sourcesContent":["import { COLOR_SCHEMA } from './constants';\nexport class Pallete {\n    constructor(colorMap) {\n        this.colorMap = colorMap || COLOR_SCHEMA;\n    }\n    setColorMap(colorMap) {\n        this.colorMap = colorMap;\n    }\n    addColorMap(colorMap) {\n        Object.assign(this.colorMap, colorMap);\n    }\n    getColor(key) {\n        return this.colorMap[key];\n    }\n    getDefaultColorKey() {\n        const keys = Object.keys(this.colorMap);\n        if (!keys.length) {\n            return 0;\n        }\n        return Number(keys[0]);\n    }\n    getDefaultColor() {\n        return this.colorMap[this.getDefaultColorKey()] || '';\n    }\n}\n//# sourceMappingURL=pallete.js.map","import { MATRIX_SIZE } from 'checker-model';\nimport { Pallete } from './pallete';\nexport const COLOR_NEUTRAL = 0;\nexport const COLOR_SLOT_1 = 1;\nexport const COLOR_SLOT_2 = 2;\nexport const COLOR_SLOT_3 = 3;\nexport const COLOR_PIECE_1 = 4;\nexport const COLOR_PIECE_2 = 5;\nexport const COLOR_PIECE_3 = 6;\nexport const COLOR_PIECE_4 = 7;\nexport const COLOR_PIECE_5 = 8;\nexport const COLOR_PIECE_6 = 9;\nexport const COLOR_PIECE_OBSTACLE = 10;\nexport const COLOR_FOCUS = 11;\nexport const COLOR_MENTION = 12;\nexport const COLOR_CLEAR = 13;\nexport const COLOR_SCHEMA = {\n    [COLOR_CLEAR]: 'White',\n    [COLOR_NEUTRAL]: 'Black',\n    [COLOR_SLOT_1]: 'Chartreuse',\n    [COLOR_SLOT_2]: 'Coral',\n    [COLOR_SLOT_3]: 'CornflowerBlue',\n    [COLOR_PIECE_1]: 'Cyan',\n    [COLOR_PIECE_2]: 'Gold',\n    [COLOR_PIECE_3]: 'SlateBlue',\n    [COLOR_PIECE_4]: 'LightCoral',\n    [COLOR_PIECE_5]: 'LightBlue',\n    [COLOR_PIECE_6]: 'DeepPink',\n    [COLOR_PIECE_OBSTACLE]: 'Gray',\n    [COLOR_FOCUS]: 'YellowGreen',\n    [COLOR_MENTION]: 'Plum',\n};\nexport const DEFAULT_SCALE2D = {\n    leftTop: { x: 0, y: 0 },\n    rightBottom: { x: MATRIX_SIZE - 1, y: MATRIX_SIZE - 1 },\n};\nexport const DEFAULT_PALLETE = new Pallete();\nexport const OFFSET_COORDINATE = { x: 3, y: 1 };\nexport const LINE_WIDTH = 5;\nexport const COMPOSITION_TYPE = 'source-over';\n//# sourceMappingURL=constants.js.map","import { cloneDeep } from 'lodash';\nimport { MATRIX_SIZE, FACTION_SIZE, FACTION_COORDINATES, MOVE_DIRECTIONS } from '../constants';\nimport { checkBoardRange } from '../utils';\nexport class ChessBoard {\n    constructor(factions) {\n        /**\n         * board storage\n         */\n        this.slots = [];\n        /**\n         * all players\n         */\n        this.factions = [];\n        /**\n         * move actions\n         */\n        this.actions = [];\n        this.factions = factions;\n        this.reset();\n    }\n    reset() {\n        this.actions = [];\n        this.initBoard();\n        this.initFactionPieces();\n        return this;\n    }\n    move(from, to) {\n        if (this.slots[from.y][from.x].piece === null || this.slots[to.y][to.x].piece !== null) {\n            return false;\n        }\n        const piece = this.get(from);\n        if (!piece.moveTo(to)) {\n            return false;\n        }\n        this.slots[from.y][from.x].piece = null;\n        this.slots[to.y][to.x].piece = piece;\n        this.actions.push({ from, to, piece });\n        return true;\n    }\n    rollback() {\n        if (!this.actions.length) {\n            return false;\n        }\n        const { from, to, piece } = this.actions.pop();\n        piece.moveTo(from);\n        this.slots[to.y][to.x].piece = null;\n        this.slots[from.y][from.x].piece = piece;\n        return true;\n    }\n    put(piece) {\n        const coordinate = piece.getCoordinate();\n        const { x, y } = coordinate;\n        if (!checkBoardRange(coordinate) || this.slots[y][x].piece !== null) {\n            return false;\n        }\n        this.slots[y][x].piece = piece;\n        return true;\n    }\n    get(coordinate) {\n        if (!checkBoardRange(coordinate)) {\n            return null;\n        }\n        return this.slots[coordinate.y][coordinate.x].piece;\n    }\n    getActionList() {\n        return cloneDeep(this.actions);\n    }\n    getSlotMatrix() {\n        return cloneDeep(this.slots);\n    }\n    getAvailableJumpPosition(coordinate) {\n        if (!checkBoardRange(coordinate)) {\n            return [];\n        }\n        return [...this.searchNeighbourPosition(coordinate), ...this.bfsSearchJumpPosition(coordinate)];\n    }\n    initBoard() {\n        this.slots = [];\n        for (let y = 0; y < MATRIX_SIZE; y++) {\n            const row = [];\n            for (let x = 0; x < MATRIX_SIZE; x++) {\n                row.push({\n                    piece: null,\n                    slotCategory: checkBoardRange({ x, y }) ? 'neutral' : 'unavailable',\n                });\n            }\n            this.slots.push(row);\n        }\n        FACTION_COORDINATES.forEach((coordinates, index) => {\n            index = index % (FACTION_SIZE / 2);\n            coordinates.forEach(coordinate => {\n                const { x, y } = coordinate;\n                this.slots[y][x].slotCategory = index;\n            });\n        });\n    }\n    initFactionPieces() {\n        this.factions.forEach(faction => {\n            faction.getPieces().forEach(piece => this.put(piece));\n        });\n    }\n    searchNeighbourPosition(coordinate) {\n        const neighbours = [];\n        const { x, y } = coordinate;\n        MOVE_DIRECTIONS.forEach(d => {\n            const neighbour = { x: x + d.x, y: y + d.y };\n            if (checkBoardRange(neighbour) && this.get(neighbour) === null) {\n                neighbours.push(neighbour);\n            }\n        });\n        return neighbours;\n    }\n    bfsSearchJumpPosition(coordinate) {\n        const q = [coordinate];\n        let head = 0;\n        while (head < q.length) {\n            const front = q[head++];\n            this.wanderAround(front).forEach(coord => {\n                if (q.find(c => c.x === coord.x && c.y === coord.y) === undefined) {\n                    q.push(coord);\n                }\n            });\n        }\n        return q.slice(1);\n    }\n    wanderAround(coordinate) {\n        const around = [];\n        MOVE_DIRECTIONS.forEach(d => {\n            const { x, y } = coordinate;\n            const neighbour = { x: x + d.x, y: y + d.y };\n            const neighbour2 = { x: x + d.x * 2, y: y + d.y * 2 };\n            if (this.get(neighbour) !== null && checkBoardRange(neighbour2) && this.get(neighbour2) === null) {\n                around.push(neighbour2);\n            }\n        });\n        return around;\n    }\n}\n//# sourceMappingURL=board.js.map","import { cloneDeep } from 'lodash';\nimport { checkBoardRange } from '../utils';\nexport class Piece {\n    constructor(coordinate, faction) {\n        /**\n         * piece status\n         */\n        this.status = 'neutral';\n        /**\n         * location of board\n         */\n        this.coordinate = { x: 0, y: 0 };\n        if (!checkBoardRange(coordinate)) {\n            throw new Error('out of board range');\n        }\n        this.faction = faction;\n        this.coordinate.x = coordinate.x;\n        this.coordinate.y = coordinate.y;\n        this.updateStatus();\n    }\n    getFactionId() {\n        return this.faction ? this.faction.getId() : null;\n    }\n    moveTo(coordinate) {\n        if (!checkBoardRange(coordinate)) {\n            return false;\n        }\n        this.coordinate.x = coordinate.x;\n        this.coordinate.y = coordinate.y;\n        this.updateStatus();\n        return true;\n    }\n    getStatus() {\n        return this.status;\n    }\n    getCoordinate() {\n        return cloneDeep(this.coordinate);\n    }\n    updateStatus() {\n        if (typeof this.faction === 'undefined') {\n            this.status = 'neutral';\n        }\n        else if (this.faction.isGoalCoordinate(this.coordinate)) {\n            this.status = 'goal';\n        }\n        else if (this.faction.isStartCoordinate(this.coordinate)) {\n            this.status = 'start';\n        }\n        else {\n            this.status = 'neutral';\n        }\n    }\n}\n//# sourceMappingURL=piece.js.map","import { isEmpty } from 'lodash';\nimport { Piece } from '../board';\nimport { FACTION_COORDINATES } from '../constants';\nimport { mirrorFactionId } from '../utils';\nexport class Faction {\n    constructor(id) {\n        this.pieces = [];\n        this.id = (id % 6);\n        this.reset();\n    }\n    reset() {\n        this.pieces = [];\n        return this;\n    }\n    initPieces(coordinates) {\n        this.reset();\n        const coords = isEmpty(coordinates) ? this.getStartCoordinates() : coordinates;\n        coords.forEach(coordinate => this.addPiece(coordinate));\n        return this;\n    }\n    addPiece(coordinate) {\n        this.pieces.push(new Piece(coordinate, this));\n        return this;\n    }\n    checkWin() {\n        if (!this.pieces.length) {\n            return false;\n        }\n        return this.pieces.filter(piece => piece.getStatus() === 'goal').length === this.pieces.length;\n    }\n    getPieces() {\n        return this.pieces;\n    }\n    getId() {\n        return this.id;\n    }\n    getStartCoordinates() {\n        return FACTION_COORDINATES[this.id];\n    }\n    getGoalCoordinates() {\n        return FACTION_COORDINATES[mirrorFactionId(this.id)];\n    }\n    isStartCoordinate(coordinate) {\n        const { x, y } = coordinate;\n        return this.getStartCoordinates().find(item => item.x === x && item.y === y) !== undefined;\n    }\n    isGoalCoordinate(coordinate) {\n        const { x, y } = coordinate;\n        return this.getGoalCoordinates().find(item => item.x === x && item.y === y) !== undefined;\n    }\n}\n//# sourceMappingURL=faction.js.map","export * from './types';\nexport * from './game';\n//# sourceMappingURL=index.js.map","import { isEmpty } from 'lodash';\nimport { ChessBoard } from '../board';\nimport { Faction } from '../faction';\nexport class GameModel {\n    constructor(factionIdentities) {\n        /**\n         * game board\n         */\n        this.board = new ChessBoard([]);\n        /**\n         * player list\n         */\n        this.players = [];\n        /**\n         * current player\n         */\n        this.currentPlayerIndex = 0;\n        /**\n         * total game status\n         */\n        this.status = 'preparing';\n        this.reset(factionIdentities);\n    }\n    reset(factionIdentities) {\n        this.players = factionIdentities.map(id => ({\n            status: 'playing',\n            faction: new Faction(id).initPieces(),\n        }));\n        this.board = new ChessBoard(this.players.map(player => player.faction));\n        this.status = 'preparing';\n        return this;\n    }\n    resetByFaction(faction) {\n        this.players = faction.map(faction => ({\n            status: 'playing',\n            faction,\n        }));\n        this.board = new ChessBoard(this.players.map(player => player.faction));\n        this.status = 'preparing';\n        return this;\n    }\n    start() {\n        this.players.forEach(player => this.updatePlayerStatus(player));\n        if (this.status !== 'preparing' || isEmpty(this.players) || this.allPlayersEnding()) {\n            return false;\n        }\n        this.status = 'running';\n        return true;\n    }\n    getStatus() {\n        return this.status;\n    }\n    getCurrentPlayer() {\n        return this.players[this.currentPlayerIndex];\n    }\n    getBoard() {\n        return this.board;\n    }\n    updateStatus() {\n        if (this.status !== 'running') {\n            return this.status;\n        }\n        this.updatePlayerStatus();\n        if (this.allPlayersEnding()) {\n            this.status = 'end';\n            return 'end';\n        }\n        this.cyclePlayer();\n        return 'running';\n    }\n    rollbackByStep(step) {\n        const actionList = this.board.getActionList();\n        if (this.status !== 'running' || isEmpty(actionList) || step < 0 || step > actionList.length) {\n            return false;\n        }\n        for (let i = 0; i < step; i++) {\n            this.board.rollback();\n        }\n        const lastFactionId = actionList[actionList.length - step].piece.getFactionId();\n        this.currentPlayerIndex = this.players.findIndex(player => player.faction.getId() === lastFactionId);\n        this.players.forEach(player => this.updatePlayerStatus(player));\n        return true;\n    }\n    getPlayerByFactionId(id) {\n        return this.players.find(player => player.faction.getId() === id);\n    }\n    allPlayersEnding() {\n        return this.players.find(player => player.status === 'playing') === undefined;\n    }\n    cyclePlayer() {\n        let nextPlayer = this.currentPlayerIndex;\n        do {\n            nextPlayer = (nextPlayer + 1) % this.players.length;\n        } while (this.players[nextPlayer].status === 'win');\n        this.currentPlayerIndex = nextPlayer;\n    }\n    updatePlayerStatus(player) {\n        if (typeof player === 'undefined') {\n            player = this.players[this.currentPlayerIndex];\n        }\n        player.status = player.faction.checkWin() ? 'win' : 'playing';\n    }\n}\n//# sourceMappingURL=game.js.map","export * from './types';\nexport * from './constants';\nexport * from './abstract-view';\nexport * from './abstract-element';\nexport * from './checker-view';\nexport * from './slot-element';\n//# sourceMappingURL=index.js.map","import { MATRIX_SIZE } from 'checker-model';\nimport { AbstractView } from './abstract-view';\nimport { SlotElement } from './slot-element';\nconst f = ({ x, y }) => y * MATRIX_SIZE + x;\nexport class CheckerView extends AbstractView {\n    constructor(board, canvas) {\n        super(board, canvas, []);\n        this.initSlots();\n        this.initEvents();\n    }\n    initSlots() {\n        const board = this.getProps();\n        const elements = this.getChildren();\n        board.getSlotMatrix().forEach((row, y) => {\n            row.forEach((slot, x) => {\n                elements.push(new SlotElement(Object.assign(Object.assign({}, slot), { coordinate: this.convert({ x, y }), status: 'normal' }), this.getCanvas()));\n            });\n        });\n    }\n    initEvents() {\n        this.getCanvas().onClick(coordinate => {\n            this.emit('click', this.reconvert(coordinate));\n        });\n    }\n    setFocusStatus(coord, status) {\n        const elements = this.getChildren();\n        const element = elements[f(coord)];\n        if (!element) {\n            return false;\n        }\n        const props = element.getProps();\n        if (!element.updateProps(Object.assign(Object.assign({}, props), { status }))) {\n            return false;\n        }\n        return element.render();\n    }\n    updateProps(props) {\n        if (!super.updateProps(props)) {\n            return false;\n        }\n        const elements = this.getChildren();\n        const board = this.getProps();\n        board.getSlotMatrix().forEach((row, y) => {\n            row.forEach((slot, x) => {\n                const element = elements[f({ x, y })];\n                element.updateProps(Object.assign(Object.assign(Object.assign({}, element.getProps()), slot), { status: 'normal' }));\n            });\n        });\n        return true;\n    }\n    /**\n     * click event handler\n     */\n    onClick(handler) {\n        this.on('click', handler);\n    }\n    // eslint-disable-next-line\n    checkUpdate(props, nextProps) {\n        return true;\n    }\n    renderView() {\n        return true;\n    }\n}\n//# sourceMappingURL=checker-view.js.map","export const LEFT_TOP = { x: 0, y: 0 };\nexport const RIGHT_BOTTOM = { x: 16, y: 16 };\nexport const MATRIX_SIZE = 17;\nexport const FACTION_SIZE = 6;\nexport const VALID_COORDINATES = [\n    [4, 4],\n    [4, 5],\n    [4, 6],\n    [4, 7],\n    [0, 12],\n    [1, 12],\n    [2, 12],\n    [3, 12],\n    [4, 12],\n    [4, 13],\n    [4, 14],\n    [4, 15],\n    [4, 16],\n    [9, 12],\n    [10, 12],\n    [11, 12],\n    [12, 12],\n];\nexport const FACTION_COORDINATES = [\n    [\n        { x: 4, y: 0 },\n        { x: 4, y: 1 },\n        { x: 5, y: 1 },\n        { x: 4, y: 2 },\n        { x: 5, y: 2 },\n        { x: 6, y: 2 },\n        { x: 4, y: 3 },\n        { x: 5, y: 3 },\n        { x: 6, y: 3 },\n        { x: 7, y: 3 },\n    ],\n    [\n        { x: 0, y: 4 },\n        { x: 1, y: 4 },\n        { x: 2, y: 4 },\n        { x: 3, y: 4 },\n        { x: 1, y: 5 },\n        { x: 2, y: 5 },\n        { x: 3, y: 5 },\n        { x: 2, y: 6 },\n        { x: 3, y: 6 },\n        { x: 3, y: 7 },\n    ],\n    [\n        { x: 4, y: 12 },\n        { x: 4, y: 9 },\n        { x: 4, y: 10 },\n        { x: 4, y: 11 },\n        { x: 5, y: 10 },\n        { x: 5, y: 11 },\n        { x: 5, y: 12 },\n        { x: 6, y: 11 },\n        { x: 6, y: 12 },\n        { x: 7, y: 12 },\n    ],\n    [\n        { x: 12, y: 16 },\n        { x: 9, y: 13 },\n        { x: 10, y: 13 },\n        { x: 11, y: 13 },\n        { x: 12, y: 13 },\n        { x: 10, y: 14 },\n        { x: 11, y: 14 },\n        { x: 12, y: 14 },\n        { x: 11, y: 15 },\n        { x: 12, y: 15 },\n    ],\n    [\n        { x: 16, y: 12 },\n        { x: 13, y: 12 },\n        { x: 14, y: 12 },\n        { x: 15, y: 12 },\n        { x: 13, y: 11 },\n        { x: 14, y: 11 },\n        { x: 15, y: 11 },\n        { x: 13, y: 10 },\n        { x: 14, y: 10 },\n        { x: 13, y: 9 },\n    ],\n    [\n        { x: 12, y: 4 },\n        { x: 9, y: 4 },\n        { x: 10, y: 4 },\n        { x: 11, y: 4 },\n        { x: 10, y: 5 },\n        { x: 11, y: 5 },\n        { x: 12, y: 5 },\n        { x: 11, y: 6 },\n        { x: 12, y: 6 },\n        { x: 12, y: 7 },\n    ],\n];\nexport const MOVE_DIRECTIONS = [\n    { x: -1, y: -1 },\n    { x: 0, y: -1 },\n    { x: -1, y: 0 },\n    { x: 1, y: 0 },\n    { x: 0, y: 1 },\n    { x: 1, y: 1 },\n];\n//# sourceMappingURL=constants.js.map","export class AbstractPredictor {\n    constructor(model, calculator) {\n        this.gameModel = model;\n        this.calculator = calculator;\n    }\n    getCalculator() {\n        return this.calculator;\n    }\n    getGameModel() {\n        return this.gameModel;\n    }\n    getBoard() {\n        return this.gameModel.getBoard();\n    }\n    getFactionById(id) {\n        const player = this.gameModel.getPlayerByFactionId(id);\n        if (typeof player === 'undefined') {\n            return undefined;\n        }\n        return player.faction;\n    }\n}\n//# sourceMappingURL=abstract-predictor.js.map","import { isEmpty, sample } from 'lodash-es';\nimport { AbstractPredictor } from './abstract-predictor';\nimport { generateStepsForBoard } from '../utils';\nexport class SimplePredictor extends AbstractPredictor {\n    constructor(model, calculator) {\n        super(model, calculator);\n    }\n    predict(id) {\n        const faction = this.getFactionById(id);\n        if (isEmpty(faction)) {\n            return null;\n        }\n        this.getCalculator().updateBoardAndFaction(this.getBoard(), faction);\n        const steps = generateStepsForBoard(this.getBoard(), faction);\n        let maxSteps = [];\n        let maxScore = -1000;\n        steps.forEach(step => {\n            const score = this.getCalculator().getScore(step);\n            if (score > maxScore) {\n                maxScore = score;\n                maxSteps = [step];\n            }\n            else if (score === maxScore) {\n                maxSteps.push(step);\n            }\n        });\n        return sample(maxSteps);\n    }\n}\n//# sourceMappingURL=simple-predictor.js.map","export const createMinMaxTreeRoot = (board) => ({\n    board,\n    boardScore: 0,\n    minOrMax: 'max',\n    alpha: -Infinity,\n    beta: +Infinity,\n    score: -Infinity,\n    steps: [],\n    stepToWin: +Infinity,\n});\nexport const createMinMaxNodeByMovePrediction = (parent, prediction) => {\n    const node = {\n        board: parent.board,\n        boardScore: prediction.score === +Infinity ? +Infinity : parent.boardScore + prediction.score,\n        minOrMax: parent.minOrMax === 'max' ? 'min' : 'max',\n        alpha: parent.alpha,\n        beta: parent.beta,\n        score: 0,\n        steps: [],\n        stepToWin: +Infinity,\n    };\n    node.score = node.minOrMax === 'max' ? -Infinity : +Infinity;\n    return node;\n};\n//# sourceMappingURL=minmax-tree-node.js.map","import { sample, isUndefined, isNull } from 'lodash-es';\nimport { mirrorFactionId } from 'checker-model';\nimport { SimplePredictor } from '../simple-predictor';\nimport { generateStepsForBoard } from '../../utils';\nimport { createMinMaxTreeRoot, createMinMaxNodeByMovePrediction } from './minmax-tree-node';\nexport class MinMaxPredictor extends SimplePredictor {\n    constructor(model, calculator, maxDepth = 5) {\n        super(model, calculator);\n        this.maxDepth = maxDepth;\n    }\n    predict(id) {\n        const mirrorPlayer = this.getGameModel().getPlayerByFactionId(mirrorFactionId(id));\n        if (isUndefined(mirrorPlayer) || mirrorPlayer.status === 'win') {\n            return super.predict(id);\n        }\n        this.faction = this.getGameModel().getPlayerByFactionId(id).faction;\n        this.mirrorFaction = mirrorPlayer.faction;\n        return this.minmaxPredict();\n    }\n    minmaxPredict() {\n        const treeRoot = createMinMaxTreeRoot(this.getBoard());\n        this.dfsPredict(0, treeRoot);\n        return sample(treeRoot.steps);\n    }\n    dfsPredict(depth, root) {\n        if (depth === this.maxDepth) {\n            root.score = root.boardScore;\n            return;\n        }\n        const faction = this.getCurrentFaction(depth);\n        const steps = generateStepsForBoard(root.board, faction);\n        for (const step of steps) {\n            root.board.move(step.from, step.to);\n            const prediction = this.createPredictionFromStep(faction, step);\n            if (isNull(prediction)) {\n                root.board.rollback();\n                continue;\n            }\n            const child = createMinMaxNodeByMovePrediction(root, prediction);\n            if (prediction.score !== +Infinity) {\n                this.dfsPredict(depth + 1, child);\n            }\n            else {\n                child.stepToWin = depth;\n            }\n            this.updateMinOrMaxScore(root, child, step);\n            root.board.rollback();\n            if (root.alpha > root.beta) {\n                break;\n            }\n        }\n    }\n    updateMinOrMaxScore(root, child, step) {\n        // checking min steps to win\n        if (child.stepToWin !== +Infinity) {\n            if (root.stepToWin > child.stepToWin) {\n                root.stepToWin = child.stepToWin;\n                root.steps = [step];\n            }\n            return;\n        }\n        // checking max/min score\n        if (root.stepToWin === +Infinity) {\n            if (child.score === root.score) {\n                root.steps.push(step);\n            }\n            else if (root.minOrMax === 'max' && child.score > root.score) {\n                root.steps = [step];\n                root.alpha = root.score = child.score;\n            }\n            else if (root.minOrMax === 'min' && child.score < root.score) {\n                root.steps = [step];\n                root.beta = root.score = child.score;\n            }\n        }\n    }\n    getCurrentFaction(depth) {\n        return (depth % 2 === 0 ? this.faction : this.mirrorFaction);\n    }\n    createPredictionFromStep(faction, step) {\n        if (faction === this.faction && faction.checkWin()) {\n            return { step, score: +Infinity };\n        }\n        this.getCalculator().updateBoardAndFaction(this.getBoard(), faction);\n        const scoreByCalculator = this.getCalculator().getScore(step);\n        const score = faction === this.faction ? scoreByCalculator : -scoreByCalculator;\n        return { step, score };\n    }\n}\n//# sourceMappingURL=minmax-predictor.js.map","import { SimplePredictor } from './simple-predictor';\nimport { MinMaxPredictor } from './minmax-predictor';\nimport { InOutCalculator } from '../calculator';\nexport class PredictorManager {\n    constructor(model, calculator) {\n        this.predictors = new Map();\n        this.calculator = calculator || new InOutCalculator(); // new SimpleCalculator();\n        this.model = model;\n        this.predictors.set('simple', new SimplePredictor(this.model, this.calculator));\n        this.predictors.set('normal', new MinMaxPredictor(this.model, this.calculator, 3));\n        this.predictors.set('hard', new MinMaxPredictor(this.model, this.calculator, 5));\n    }\n    get(difficulty) {\n        return this.predictors.get(difficulty);\n    }\n}\n//# sourceMappingURL=predictor-manager.js.map","export * from './abstract-predictor';\nexport * from './simple-predictor';\nexport * from './minmax-predictor';\nexport * from './predictor-manager';\n//# sourceMappingURL=index.js.map","import { EventEmitter } from 'events';\nexport class AbstractCanvas extends EventEmitter {\n    constructor(pallete, scale) {\n        super();\n        this.transforms = [];\n        this.fillMode = 'fill';\n        this.pallete = pallete;\n        this.color = this.pallete.getDefaultColorKey();\n        this.scale = scale;\n    }\n    getScale() {\n        return this.scale;\n    }\n    setScale(scale) {\n        this.scale = scale;\n        return this;\n    }\n    getFillMode() {\n        return this.fillMode;\n    }\n    setFillMode(fm) {\n        this.fillMode = fm;\n        return this;\n    }\n    getPallete() {\n        return this.pallete;\n    }\n    getColor() {\n        return this.color;\n    }\n    setColor(color) {\n        if (this.pallete.getColor(color) === '') {\n            return false;\n        }\n        this.color = color;\n        return true;\n    }\n    setTransforms(transList) {\n        this.transforms = transList;\n    }\n    addTransform(trans) {\n        this.transforms.push(trans);\n    }\n    getTransforms() {\n        return this.transforms;\n    }\n    transform(from) {\n        return this.getTransforms().reduce((coordinate, trans) => trans.transform(coordinate), from);\n    }\n    untransform(to) {\n        return this.getTransforms().reduceRight((coordinate, trans) => trans.untransform(coordinate), to);\n    }\n    onClick(handler) {\n        this.on('click', handler);\n    }\n}\n//# sourceMappingURL=abstract-canvas.js.map","export class Zoom2D {\n    constructor(factor) {\n        this.factor = factor || 1;\n    }\n    transform(from) {\n        return { x: from.x * this.factor, y: from.y * this.factor };\n    }\n    untransform(to) {\n        return { x: to.x / this.factor, y: to.y / this.factor };\n    }\n}\n//# sourceMappingURL=zoom.js.map","export class RotateY2D {\n    constructor(radius) {\n        this.radius = radius || 0;\n    }\n    transform(from) {\n        return {\n            x: from.x - from.y * Math.sin(this.radius),\n            y: from.y * Math.cos(this.radius),\n        };\n    }\n    untransform(to) {\n        return {\n            x: to.x + to.y * Math.tan(this.radius),\n            y: to.y / Math.cos(this.radius),\n        };\n    }\n}\n//# sourceMappingURL=rotate-y.js.map","export class OffsetX2D {\n    constructor(unit) {\n        this.unit = unit;\n    }\n    transform(from) {\n        return {\n            x: from.x + this.unit.x,\n            y: from.y + this.unit.y,\n        };\n    }\n    untransform(to) {\n        return {\n            x: to.x - this.unit.x,\n            y: to.y - this.unit.y,\n        };\n    }\n}\n//# sourceMappingURL=offset-x.js.map","import { MATRIX_SIZE } from 'checker-model';\nimport { DEFAULT_SCALE2D, DEFAULT_PALLETE, OFFSET_COORDINATE, LINE_WIDTH, COMPOSITION_TYPE } from '../constants';\nimport { AbstractCanvas } from '../abstract-canvas';\nimport { Zoom2D } from './zoom';\nimport { RotateY2D } from './rotate-y';\nimport { OffsetX2D } from './offset-x';\nexport class HTMLCanvas2d extends AbstractCanvas {\n    constructor(canvas, scale = DEFAULT_SCALE2D, pallete = DEFAULT_PALLETE) {\n        super(pallete, scale);\n        this.onClickHandler = (ev) => {\n            this.emit('click', this.untransform({ x: ev.offsetX, y: ev.offsetY }));\n        };\n        this.canvas = canvas;\n        this.canvas.onclick = this.onClickHandler;\n        const deviceContext = this.canvas.getContext('2d');\n        if (deviceContext === null) {\n            throw new Error('init canvas error!');\n        }\n        this.deviceContext = deviceContext;\n        this.deviceContext.lineWidth = LINE_WIDTH;\n        this.deviceContext.globalCompositeOperation = COMPOSITION_TYPE;\n        this.setColor(this.getColor());\n        this.setTransforms([\n            new RotateY2D(Math.PI / 6),\n            new OffsetX2D(OFFSET_COORDINATE),\n            new Zoom2D(this.getZoomFactor()),\n        ]);\n    }\n    untransform(to) {\n        const coord = super.untransform(to);\n        coord.x = Math.round(coord.x);\n        coord.y = Math.round(coord.y);\n        return coord;\n    }\n    line(begin, end) {\n        begin = this.transform(begin);\n        end = this.transform(end);\n        this.deviceContext.moveTo(begin.x, begin.y);\n        this.deviceContext.lineTo(end.x, end.y);\n        return true;\n    }\n    circle(coord, r) {\n        coord = this.transform(coord);\n        this.deviceContext.beginPath();\n        this.deviceContext.arc(coord.x, coord.y, r, 0, Math.PI * 2);\n        if (this.getFillMode() == 'fill') {\n            this.deviceContext.fill();\n        }\n        else {\n            this.deviceContext.stroke();\n        }\n        return true;\n    }\n    putPixel(coord) {\n        coord = this.transform(coord);\n        this.deviceContext.rect(coord.x, coord.y, 1, 1);\n        this.deviceContext.fill();\n        return true;\n    }\n    setColor(color) {\n        if (!super.setColor(color)) {\n            return false;\n        }\n        this.deviceContext.fillStyle = this.deviceContext.strokeStyle = this.getPallete().getColor(color);\n        return true;\n    }\n    getZoomFactor() {\n        const length = Math.min(Number(this.canvas.getAttribute('width')), Number(this.canvas.getAttribute('height')));\n        return length / MATRIX_SIZE;\n    }\n}\n//# sourceMappingURL=canvas.js.map","export * from './canvas';\nexport * from './rotate-y';\nexport * from './zoom';\nexport * from './offset-x';\n//# sourceMappingURL=index.js.map","import { isUndefined } from 'lodash-es';\nimport { PredictorManager } from 'checker-ai';\nimport { AbstractCheckerGameGui } from '../base';\nexport class SinglePlayerCheckerGameGui extends AbstractCheckerGameGui {\n    constructor(props) {\n        super(props);\n        this.predictors = new PredictorManager(this.model);\n    }\n    moveByOthers() {\n        const factionId = this.model.getCurrentPlayer().faction.getId();\n        const currentAiPlayer = this.aiPlayers.find(ai => ai.factionId === factionId);\n        const difficulty = isUndefined(currentAiPlayer) ? 'simple' : currentAiPlayer.difficulty;\n        const predictor = this.predictors.get(difficulty);\n        return new Promise(resolve => setTimeout(() => resolve(predictor.predict(factionId)), 500));\n    }\n}\n//# sourceMappingURL=single-player-game.js.map","export * from './single-player-game';\n//# sourceMappingURL=index.js.map","import 'socket.io-client';\nimport { isEmpty } from 'lodash-es';\nimport { SYNC_GAME } from 'checker-transfer-contract';\nimport { AbstractCheckerGameGui } from '../base';\nexport class MultiPlayersCheckerGameGui extends AbstractCheckerGameGui {\n    constructor(props, socket) {\n        super(props);\n        this.moveByOthersPromise = null;\n        this.statusQueue = {};\n        this.socket = socket;\n    }\n    moveByOthers() {\n        return new Promise(resolve => {\n            const currentFactionId = this.model.getCurrentPlayer().faction.getId();\n            if (!isEmpty(this.statusQueue[currentFactionId])) {\n                const topValue = this.statusQueue[currentFactionId].splice(0, 1);\n                resolve(topValue[0]);\n                return;\n            }\n            this.socket.on(SYNC_GAME, (message) => {\n                console.log(currentFactionId);\n                console.log('sync msg', message);\n                const { current, from, to } = message;\n                const step = { from, to, piece: this.model.getBoard().get(from) };\n                if (current === currentFactionId) {\n                    resolve(step);\n                }\n                else {\n                    if (isEmpty(this.statusQueue[current])) {\n                        this.statusQueue[current] = [step];\n                    }\n                    else {\n                        this.statusQueue[current].push(step);\n                    }\n                }\n            });\n        });\n    }\n}\n//# sourceMappingURL=multi-players-game.js.map","export * from './multi-players-game';\n//# sourceMappingURL=index.js.map","export * from './canvas';\nexport * from './views';\n//# sourceMappingURL=index.js.map","export const dist = (a, b) => {\n    const deltaX = a.x - b.x;\n    const deltaY = a.y - b.y;\n    if (Math.abs(deltaX) < Math.abs(deltaY)) {\n        return Math.abs(deltaX) + Math.abs(a.y - deltaX - b.y);\n    }\n    else {\n        return Math.abs(deltaY) + Math.abs(a.x - deltaY - b.x);\n    }\n};\nexport const minDistanceFromGoal = (point, goals) => {\n    let minDist = 0xff;\n    goals.forEach(goal => {\n        minDist = Math.min(minDist, dist(goal, point));\n    });\n    return minDist;\n};\nexport const stepDistance = (goals, from, to) => {\n    return minDistanceFromGoal(from, goals) - minDistanceFromGoal(to, goals);\n};\nexport const generateStepsForBoard = (board, faction) => {\n    const steps = [];\n    faction.getPieces().forEach(piece => {\n        const from = piece.getCoordinate();\n        const goals = board.getAvailableJumpPosition(from);\n        goals.forEach(to => {\n            steps.push({ from, to, piece });\n        });\n    });\n    return steps;\n};\n//# sourceMappingURL=utils.js.map","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './index.scss';\n\nconst Home: FC = () => {\n  return (\n    <div className=\"home\">\n      <p className=\"home-title\">Chinese Checker</p>\n      <section>\n        <Link to=\"/single/room\" replace>\n          单人游戏\n        </Link>\n        <Link to=\"/network/connect\" replace>\n          网络对战\n        </Link>\n      </section>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { FC, useMemo } from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport { Slot, SlotType } from '../../hooks';\n\nimport './index.scss';\nimport { AIDifficulty } from '../../../../checker-ai/lib';\nimport { ClientStatus } from 'checker-transfer-contract';\n\nexport type FactionSlotProps = {\n  index: number;\n  onChangeSlot?: (slotType: SlotType, aiLevel?: AIDifficulty) => void;\n} & Slot;\n\nexport const FactionSlot: FC<FactionSlotProps> = props => {\n  const { index, aiLevel, playerName, slotType, onChangeSlot, status } = props || {};\n\n  const id = useMemo(() => `faction-slot-${index}`, [index]);\n  const showName = useMemo(() => {\n    switch (slotType) {\n      case 'empty':\n        return '空';\n      case 'ai':\n        return {\n          simple: '简单电脑',\n          normal: '中等电脑',\n          hard: '困难电脑',\n        }[aiLevel || 'simple'];\n      case 'myself':\n        return '我';\n      case 'player':\n        return playerName || '网络玩家';\n    }\n  }, [aiLevel, playerName, slotType]);\n  const showStatus = useMemo(() => (status === ClientStatus.Preparing ? '准备' : ''), [status]);\n\n  return (\n    <>\n      <a className={`faction-slot ${id}`} data-tip data-for={id} data-event=\"click focus\">\n        {showName}\n        <br />\n        {showStatus}\n      </a>\n      {onChangeSlot && (\n        <ReactTooltip id={id} place=\"bottom\" type=\"dark\" effect=\"solid\" globalEventOff=\"click\" clickable>\n          <ul className=\"faction-slot-selector\">\n            <li onClick={(): void => onChangeSlot('empty')}>空</li>\n            <li onClick={(): void => onChangeSlot('myself')}>我</li>\n            <li onClick={(): void => onChangeSlot('ai', 'simple')}>简单电脑</li>\n            <li onClick={(): void => onChangeSlot('ai', 'normal')}>中等电脑</li>\n            <li onClick={(): void => onChangeSlot('ai', 'hard')}>困难电脑</li>\n          </ul>\n        </ReactTooltip>\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { AIDifficulty } from 'checker-ai';\nimport { FactionSlot } from '../FactionSlot';\nimport { Slot, SlotType } from '../../hooks';\n\nimport './index.scss';\n\ninterface IRoomProps {\n  middleButtonText: string;\n  onMiddleButtonClick: (slots: Slot[]) => void;\n  slots: Slot[];\n  setSlot?: (index: number, slotType: SlotType, aiLevel?: AIDifficulty, playerName?: string) => boolean;\n}\n\nconst Room: FC<IRoomProps> = props => {\n  const { onMiddleButtonClick, middleButtonText, slots, setSlot } = props || {};\n\n  return (\n    <div className=\"room\">\n      <div className=\"room-middle\" onClick={(): void => onMiddleButtonClick(slots)}>\n        {middleButtonText}\n      </div>\n      {slots.map((slot, index) => (\n        <FactionSlot\n          key={index}\n          index={index}\n          {...slot}\n          onChangeSlot={setSlot ? setSlot.bind(null, index) : undefined}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Room;\n","import React, { FC, createContext, useContext, useState, Dispatch } from 'react';\nimport { Slot } from './useSlots';\nimport { FactionIdentity } from 'checker-model';\n\nexport type GameMode = 'single' | 'network';\n\nexport type NetworkParamType = {\n  server: string;\n  clientId: string;\n  socket: SocketIOClient.Socket;\n};\n\nexport type NetworkRoomParamType = {\n  roomId: string;\n  myFaction: FactionIdentity;\n  iAmMaster: boolean;\n  isPrepared?: boolean;\n};\n\nexport type GlobalContextType = {\n  gameMode: GameMode;\n  setGameMode: Dispatch<GameMode>;\n  slots: Slot[];\n  setSlots: Dispatch<Slot[]>;\n  networkParam: NetworkParamType | null;\n  setNetworkParam: Dispatch<NetworkParamType | null>;\n  networkRoomParam: NetworkRoomParamType | null;\n  setNetworkRoomParam: Dispatch<NetworkRoomParamType | null>;\n};\n\nconst defaultGlobalContext: GlobalContextType = {\n  gameMode: 'single',\n  setGameMode: () => void 0,\n  slots: [],\n  setSlots: () => void 0,\n  networkParam: null,\n  setNetworkParam: () => void 0,\n  networkRoomParam: null,\n  setNetworkRoomParam: () => void 0,\n};\n\nexport const GlobalContext = createContext<GlobalContextType>(defaultGlobalContext);\n\nexport const GlobalContextProvider: FC = props => {\n  const [networkParam, setNetworkParam] = useState<NetworkParamType | null>(null);\n  const [networkRoomParam, setNetworkRoomParam] = useState<NetworkRoomParamType | null>(null);\n  const [gameMode, setGameMode] = useState<GameMode>('single');\n  const [slots, setSlots] = useState<Slot[]>([]);\n  const context = {\n    ...defaultGlobalContext,\n    gameMode,\n    setGameMode,\n    slots,\n    setSlots,\n    networkParam,\n    setNetworkParam,\n    networkRoomParam,\n    setNetworkRoomParam,\n  };\n  return <GlobalContext.Provider value={context}>{(props || {}).children}</GlobalContext.Provider>;\n};\n\nexport const useGlobalContext = (): GlobalContextType => {\n  return useContext(GlobalContext);\n};\n","import { useMemo } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { useGlobalContext } from './useGlobalContext';\nimport { Request, Response, STATUS_OK } from 'checker-transfer-contract';\n\nexport const useInvoke = (): typeof invoke => {\n  const { networkParam } = useGlobalContext();\n  const { server, clientId } = networkParam || {};\n\n  const invoke = useMemo(\n    () => <TReq, TRes>(path: string, data: TReq): Promise<TRes> => {\n      if (!clientId || !server) {\n        return Promise.reject('params invalid');\n      }\n\n      const url = `//${server}${path}`;\n      const request: Request<TReq> = {\n        clientId,\n        data,\n      };\n\n      return axios.post<Response<TRes>>(url, request).then(axiosRes => {\n        const res = axiosRes.data;\n        if (res.code === STATUS_OK) {\n          return res.data;\n        }\n\n        toast.warn(res.message, {\n          autoClose: 1000,\n          hideProgressBar: true,\n          position: 'top-center',\n        });\n        throw new Error(res.message);\n      });\n    },\n    [server, clientId],\n  );\n\n  return invoke;\n};\n","import { useCallback } from 'react';\nimport io from 'socket.io-client';\nimport { SOCKET_PATH, SYNC_CLIENT, SyncClient } from 'checker-transfer-contract';\nimport { useGlobalContext } from '../hooks';\nimport { toast } from 'react-toastify';\n\ninterface IConnection {\n  connect(server: string): Promise<void>;\n  disconnect(): void;\n}\n\n// eslint-disable-next-line\nexport const useConnectToServer = (): IConnection => {\n  const globalContext = useGlobalContext();\n\n  const connect = (server: string): Promise<void> =>\n    new Promise((resolve, reject) => {\n      const socket = io(server, {\n        path: SOCKET_PATH,\n      });\n      const timeout = setTimeout(() => {\n        socket.close();\n        reject();\n      }, 5000);\n\n      socket.on(SYNC_CLIENT, (data: SyncClient) => {\n        globalContext.setNetworkParam({\n          clientId: data.id,\n          server: server,\n          socket,\n        });\n        clearTimeout(timeout);\n        resolve();\n      });\n\n      socket.on('disconnect', () => {\n        globalContext.setNetworkParam(null);\n        globalContext.setNetworkRoomParam(null);\n        toast.info('连接已断开', {\n          autoClose: 1000,\n          hideProgressBar: true,\n          position: 'top-center',\n        });\n        socket.close();\n      });\n      socket.connect();\n    });\n\n  const disconnect = useCallback((): void => {\n    const { networkParam, setNetworkParam } = globalContext;\n    if (!networkParam) {\n      return;\n    }\n    networkParam.socket.disconnect();\n    setNetworkParam(null);\n  }, [globalContext]);\n\n  return { connect, disconnect };\n};\n","import React, { FC, useCallback } from 'react';\nimport Room from '../../components/Room';\nimport { Slot, useGlobalContext, useSlots } from '../../hooks';\nimport { useHistory } from 'react-router-dom';\n\nconst SingleRoom: FC = () => {\n  const history = useHistory();\n  const { setSlots, setGameMode } = useGlobalContext();\n  const { slots, setSlot } = useSlots();\n\n  const startGame = useCallback(\n    (slots: Slot[]) => {\n      setGameMode('single');\n      setSlots(slots);\n      history.replace('/game');\n    },\n    [history, setGameMode, setSlots],\n  );\n\n  return <Room middleButtonText=\"开始\" onMiddleButtonClick={startGame} slots={slots} setSlot={setSlot} />;\n};\n\nexport default SingleRoom;\n","import { useState, useMemo } from 'react';\nimport { AIDifficulty } from 'checker-ai';\nimport { ClientStatus, RoomDetailMessage } from 'checker-transfer-contract';\nimport { FactionIdentity } from 'checker-model';\nimport { useGlobalContext } from './index';\n\nexport type SlotType = 'myself' | 'ai' | 'empty' | 'player';\n\nexport type Slot = {\n  slotType: SlotType;\n  playerName?: string;\n  aiLevel?: AIDifficulty;\n  status?: ClientStatus;\n};\n\nconst initFactionProps = (myIndex: number): Slot[] =>\n  [0, 1, 2, 3, 4, 5].map(index => {\n    const slotType: SlotType = index === myIndex ? 'myself' : 'empty';\n    return { slotType };\n  });\n\ntype SetSlotType = (index: number, slotType: SlotType, aiLevel?: AIDifficulty, playerName?: string) => boolean;\n\nexport const useSlots = (): { slots: Slot[]; setSlot: SetSlotType } => {\n  const [myIndex, setMyIndex] = useState<number>(3);\n  const [slots, setSlots] = useState<Slot[]>(initFactionProps(myIndex));\n\n  const setSlot: SetSlotType = (index: number, slotType: SlotType, aiLevel?: AIDifficulty, playerName?: string) => {\n    if (index === myIndex) {\n      return false;\n    }\n\n    const newSlots = Array.from(slots);\n    const newSlot: Slot = {\n      slotType,\n      playerName,\n      aiLevel: aiLevel,\n    };\n\n    if (slotType === 'myself') {\n      newSlots[myIndex] = { slotType: 'empty' };\n      setMyIndex(index);\n    }\n\n    newSlots[index] = newSlot;\n    setSlots(newSlots);\n    return true;\n  };\n\n  return { slots, setSlot };\n};\n\nexport const useNetSlots = (roomDetail: RoomDetailMessage | null): Slot[] => {\n  const { networkRoomParam, setSlots } = useGlobalContext();\n\n  return useMemo(() => {\n    if (!networkRoomParam || !roomDetail) {\n      return [];\n    }\n\n    const slots: Slot[] = [];\n    for (let i = 0; i < 6; i++) {\n      const player = roomDetail.players[i as FactionIdentity];\n      if (!player) {\n        slots.push({\n          slotType: 'empty',\n        });\n      } else if (i === networkRoomParam.myFaction) {\n        slots.push({\n          slotType: 'myself',\n          status: player.status,\n        });\n      } else {\n        slots.push({\n          slotType: 'player',\n          status: player.status,\n        });\n      }\n    }\n\n    setSlots(slots);\n    return slots;\n  }, [roomDetail, networkRoomParam, setSlots]);\n};\n","import { FactionIdentity, MoveStep, Coordinate } from 'checker-model';\nimport { SinglePlayerCheckerGameGui, ICheckerGameGuiProps, AIPlayer } from 'checker-game-gui';\nimport { ChessProps } from './interface';\nimport { ChessEvents } from '../../hooks';\n\nconst convert = (canvas: HTMLCanvasElement, chessProps: ChessProps): ICheckerGameGuiProps => {\n  const players: FactionIdentity[] = [];\n  const aiPlayers: AIPlayer[] = [];\n  let myFactionId: FactionIdentity = 0;\n\n  chessProps.slots.forEach((slot, index) => {\n    const slotType = slot.slotType;\n    if (slotType === 'empty') {\n      return;\n    }\n    if (slotType === 'myself') {\n      myFactionId = index as FactionIdentity;\n    } else {\n      // ai\n      aiPlayers.push({\n        factionId: index as FactionIdentity,\n        difficulty: slot.aiLevel || 'simple',\n      });\n    }\n    players.push(index as FactionIdentity);\n  });\n\n  const props: ICheckerGameGuiProps = {\n    canvasElement: canvas,\n    players,\n    aiPlayers,\n    myFactionId,\n  };\n\n  return props;\n};\n\nexport class SingleChessGame extends SinglePlayerCheckerGameGui {\n  private events: ChessEvents;\n\n  constructor(canvas: HTMLCanvasElement, props: ChessProps) {\n    super(convert(canvas, props));\n    this.events = {\n      onChessMove: props.onChessMove,\n      onClick: props.onClick,\n      onGameEnd: props.onGameEnd,\n      onGameStart: props.onGameStart,\n      onGameWin: props.onGameWin,\n    };\n  }\n\n  onClick(coord: Coordinate): void {\n    this.events.onClick(coord);\n  }\n\n  onGameStart(): void {\n    this.events.onGameStart();\n  }\n\n  onGameEnd(): void {\n    this.events.onGameEnd();\n  }\n\n  onGameWin(factionId: FactionIdentity): void {\n    this.events.onGameWin(factionId);\n  }\n\n  onChessMove(steps: MoveStep[]): void {\n    this.events.onChessMove(steps);\n  }\n}\n","import { FactionIdentity, MoveStep, Coordinate } from 'checker-model';\nimport { MultiPlayersCheckerGameGui, ICheckerGameGuiProps } from 'checker-game-gui';\nimport { ChessProps } from './interface';\nimport { ChessEvents } from '../../hooks';\n\nconst convert = (canvas: HTMLCanvasElement, chessProps: ChessProps): ICheckerGameGuiProps => {\n  const players: FactionIdentity[] = [];\n  let myFactionId: FactionIdentity = 0;\n\n  chessProps.slots.forEach((slot, index) => {\n    const slotType = slot.slotType;\n    if (slotType === 'empty') {\n      return;\n    }\n    if (slotType === 'myself') {\n      myFactionId = index as FactionIdentity;\n    }\n    players.push(index as FactionIdentity);\n  });\n\n  const props: ICheckerGameGuiProps = {\n    aiPlayers: [],\n    canvasElement: canvas,\n    myFactionId,\n    players,\n  };\n\n  return props;\n};\n\nexport class NetChessGame extends MultiPlayersCheckerGameGui {\n  private events: ChessEvents;\n\n  constructor(canvas: HTMLCanvasElement, props: ChessProps) {\n    super(convert(canvas, props), props.socket as SocketIOClient.Socket);\n    this.events = {\n      onChessMove: props.onChessMove,\n      onClick: props.onClick,\n      onGameEnd: props.onGameEnd,\n      onGameStart: props.onGameStart,\n      onGameWin: props.onGameWin,\n    };\n  }\n\n  onClick(coord: Coordinate): void {\n    this.events.onClick(coord);\n  }\n\n  onGameStart(): void {\n    this.events.onGameStart();\n  }\n\n  onGameEnd(): void {\n    this.events.onGameEnd();\n  }\n\n  onGameWin(factionId: FactionIdentity): void {\n    this.events.onGameWin(factionId);\n  }\n\n  onChessMove(steps: MoveStep[]): void {\n    this.events.onChessMove(steps);\n  }\n}\n","import React, { FC, useRef, useEffect } from 'react';\nimport { ChessProps, SingleChessGame, NetChessGame } from './interface';\n\nimport './index.scss';\nimport { Redirect } from 'react-router-dom';\n\nconst Chess: FC<ChessProps> = props => {\n  const { mode, slots } = props || {};\n  const chessRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (chessRef.current === null) {\n      return;\n    }\n    if (mode === 'single') {\n      new SingleChessGame(chessRef.current, props).start();\n    } else {\n      new NetChessGame(chessRef.current, props).start();\n    }\n  }, [chessRef, mode]);\n\n  return slots.length ? <canvas ref={chessRef} className=\"chess\" width={600} height={600} /> : <Redirect to=\"/\" />;\n};\n\nexport default Chess;\n","import React, { FC, useEffect, useRef } from 'react';\nimport { MoveStep } from 'checker-model';\n\nimport './index.scss';\n\nconst StepList: FC<{ steps: MoveStep[] }> = props => {\n  const { steps } = props || {};\n  const contentRef = useRef<HTMLUListElement>(null);\n\n  useEffect(() => {\n    if (contentRef.current !== null) {\n      contentRef.current.scrollTop = contentRef.current.scrollHeight;\n    }\n  }, [steps]);\n\n  return (\n    <div className=\"step-list\">\n      <div className=\"step-list-title\">行棋记录</div>\n      <ul className=\"step-list-content\" ref={contentRef}>\n        {steps.map((step, index) => {\n          const faction = step.piece.getFactionId();\n          const { from, to } = step;\n          return <li key={index}>{`Player ${faction} | (${from.x}, ${from.y}) -> (${to.x}, ${to.y})`}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default StepList;\n","import React, { FC, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useGlobalContext, useGameStatus } from '../../hooks';\nimport Chess from '../../components/Chess';\nimport StepList from '../../components/StepList';\n\nimport './index.scss';\nimport { toast } from 'react-toastify';\n\nconst Game: FC = () => {\n  const history = useHistory();\n  const { gameMode, slots, networkParam } = useGlobalContext();\n  const { status, actions, mention, onChessMove, onClick, onGameEnd, onGameStart, onGameWin } = useGameStatus();\n\n  useEffect(() => {\n    const backUrl = gameMode === 'network' ? '/network/rooms' : '/single/room';\n    if (status === 'end') {\n      toast.info('游戏结束,1s后自动返回...', {\n        autoClose: 1000,\n        hideProgressBar: true,\n        position: 'top-center',\n        onClose: () => history.replace(backUrl),\n      });\n    }\n  }, [status, slots, gameMode, history]);\n\n  return (\n    <>\n      <Chess\n        mode={gameMode}\n        slots={slots}\n        onGameStart={onGameStart}\n        onGameEnd={onGameEnd}\n        onGameWin={onGameWin}\n        onChessMove={onChessMove}\n        onClick={onClick}\n        socket={(networkParam && networkParam.socket) || undefined}\n      />\n      <div className=\"game-status-label\">{mention}</div>\n      <StepList steps={actions} />\n    </>\n  );\n};\n\nexport default Game;\n","import { useState } from 'react';\nimport { FactionIdentity, MoveStep, Coordinate, GameStatus } from 'checker-model';\nimport { useInvoke } from './useInvoke';\nimport { MoveChessBean, MOVE_CHESS } from 'checker-transfer-contract';\nimport { useGlobalContext } from './useGlobalContext';\n\nexport type ChessEvents = {\n  onClick(coord: Coordinate): void;\n  onGameStart(): void;\n  onGameEnd(): void;\n  onGameWin(factionId: FactionIdentity): void;\n  onChessMove(steps: MoveStep[]): void;\n};\n\nexport interface IGameStatus {\n  status: GameStatus;\n  mention: string;\n  actions: MoveStep[];\n}\n\n// eslint-disable-next-line\nexport const useGameStatus = (): IGameStatus & ChessEvents => {\n  const { gameMode, networkRoomParam } = useGlobalContext();\n  const invoke = useInvoke();\n  const [status, setStatus] = useState<GameStatus>('preparing');\n  const [mention, setMention] = useState<string>('Ready');\n  const [actions, setActions] = useState<MoveStep[]>([]);\n\n  const onClick = (coordinate: Coordinate): void => {\n    setMention(`You have clicked on (${coordinate.x}, ${coordinate.y})`);\n  };\n\n  const onGameStart = (): void => {\n    setStatus('running');\n    setMention('Game Start~');\n  };\n\n  const onGameEnd = (): void => {\n    setStatus('end');\n    setMention('Game Over~');\n  };\n\n  const onGameWin = (factionIdentity: FactionIdentity): void => {\n    setMention(`Player ${factionIdentity} has reached the goal!`);\n  };\n\n  const onChessMove = (steps: MoveStep[]): void => {\n    const moveStep = steps[steps.length - 1];\n    const faction = moveStep.piece.getFactionId();\n    const { from, to } = moveStep;\n    const mention = `Player ${faction}: (${from.x}, ${from.y}) -> (${to.x}, ${to.y})`;\n\n    if (gameMode === 'network' && networkRoomParam && networkRoomParam.myFaction === faction) {\n      const { from, to } = moveStep;\n      invoke<MoveChessBean, {}>(MOVE_CHESS, { from, to });\n    }\n    setMention(mention);\n    setActions(steps);\n  };\n\n  return {\n    status,\n    mention,\n    actions,\n    onChessMove,\n    onClick,\n    onGameEnd,\n    onGameStart,\n    onGameWin,\n  };\n};\n","import React, { FC, useState, ChangeEvent, useCallback } from 'react';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router-dom';\nimport { useGlobalContext, useConnectToServer } from '../../hooks';\n\nimport './index.scss';\n\n// eslint-disable-next-line\nconst NetConnection: FC = () => {\n  const globalContext = useGlobalContext();\n  const [inputServer, setInputServer] = useState<string>('');\n  const [buttonText, setButtonText] = useState<string>('Connect');\n  const { connect } = useConnectToServer();\n  const connectToServer = useCallback(() => {\n    setButtonText('Connecting');\n    connect(inputServer)\n      .then(() => {\n        toast.info('连接成功', {\n          autoClose: 1000,\n          hideProgressBar: true,\n          position: 'top-center',\n        });\n      })\n      .catch(() => {\n        toast.warn('连接失败', {\n          autoClose: 1000,\n          hideProgressBar: true,\n          position: 'top-center',\n        });\n        setButtonText('Connect');\n      });\n  }, [inputServer, connect]);\n\n  return globalContext.networkParam ? (\n    <Redirect to=\"/network/rooms\" />\n  ) : (\n    <div className=\"net-connection\">\n      <label className=\"net-connection-input\">\n        连接服务器 http://\n        <input\n          type=\"text\"\n          value={inputServer}\n          onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n            setInputServer(e.target.value);\n          }}\n        />\n      </label>\n      <div className=\"net-connection-button\" onClick={connectToServer}>\n        {buttonText}\n      </div>\n    </div>\n  );\n};\n\nexport default NetConnection;\n","import React, { SFC, useCallback } from 'react';\nimport { FactionIdentity } from 'checker-model';\nimport { RoomPreview } from 'checker-transfer-contract';\n\nimport './index.scss';\n\ntype NetRoomPreviewProps = {\n  onClickFreeSlot(roomId: string, factionId: FactionIdentity): void;\n  roomInfo: RoomPreview;\n};\n\nconst NetRoomPreview: SFC<NetRoomPreviewProps> = props => {\n  const factions: FactionIdentity[] = [0, 1, 2, 3, 4, 5];\n  const { onClickFreeSlot, roomInfo } = props || {};\n\n  const onClickSlot = useCallback(\n    (factionId: FactionIdentity) => {\n      if (roomInfo.freeFactions.includes(factionId)) {\n        onClickFreeSlot(roomInfo.id, factionId);\n      }\n    },\n    [onClickFreeSlot, roomInfo.id, roomInfo.freeFactions],\n  );\n\n  return (\n    <div className=\"net-room-preview\">\n      <div className=\"net-room-preview-name\">\n        <div className=\"net-room-preview-name-title\">房间:</div>\n        <div className=\"net-room-preview-name-content\">{roomInfo.name}</div>\n      </div>\n      <div className=\"net-room-preview-factions\">\n        {factions.map((factionId, index) => (\n          <div\n            key={factionId}\n            onClick={(): void => onClickSlot(factionId)}\n            className={\n              roomInfo.freeFactions.includes(factionId)\n                ? 'net-room-preview-factions-free'\n                : 'net-room-preview-factions-filled'\n            }\n          >\n            {index}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default NetRoomPreview;\n","import React, { FC, useState, ChangeEvent, useCallback } from 'react';\nimport { toast } from 'react-toastify';\n\nimport './index.scss';\n\ntype NetRoomCreatorProps = {\n  onCreateRoom(name: string): void;\n  onDisconnect(): void;\n};\n\nconst NetRoomCreator: FC<NetRoomCreatorProps> = props => {\n  const [inputName, setInputName] = useState<string>('');\n  const { onCreateRoom, onDisconnect } = props || {};\n\n  const onClickBtn = useCallback((): void => {\n    if (!inputName) {\n      toast.warn('房间名不能为空', {\n        autoClose: 1000,\n        hideProgressBar: true,\n        position: 'top-center',\n      });\n      return;\n    }\n    onCreateRoom(inputName);\n  }, [inputName, onCreateRoom]);\n\n  return (\n    <div className=\"netroom-create\">\n      <label>\n        房间名:\n        <input\n          type=\"text\"\n          onChange={(e: ChangeEvent<HTMLInputElement>): void => setInputName(e.target.value)}\n          value={inputName}\n        />\n      </label>\n      <a className=\"netroom-create-btn\" onClick={onClickBtn}>\n        新建房间\n      </a>\n      <a className=\"netroom-create-btn disconnect\" onClick={onDisconnect}>\n        断开连接\n      </a>\n    </div>\n  );\n};\n\nexport default NetRoomCreator;\n","import React, { FC, useEffect, useCallback } from 'react';\nimport { useHistory, Redirect } from 'react-router-dom';\nimport { FactionIdentity } from 'checker-model';\nimport {\n  CreateRoomBean,\n  CreateRoomId,\n  CREATE_ROOM,\n  JoinRoomBean,\n  RoomDetailMessage,\n  JOIN_ROOM_REQUEST,\n} from 'checker-transfer-contract';\nimport {\n  useGlobalContext,\n  useInvoke,\n  useNetRooms,\n  NetworkParamType,\n  NetworkRoomParamType,\n  useConnectToServer,\n} from '../../hooks';\nimport NetRoomPreview from '../../components/NetRoomPreview';\nimport NetRoomCreator from '../../components/NetRoomCreator';\n\nimport './index.scss';\n\ntype TInvoke = ReturnType<typeof useInvoke>;\n\nconst useRedirect = (networkParam: NetworkParamType | null, networkRoomParam: NetworkRoomParamType | null): void => {\n  const history = useHistory();\n  useEffect(() => {\n    if (!networkParam) {\n      history.replace('/network/connect');\n    } else if (networkRoomParam) {\n      history.replace(`/network/room/${networkRoomParam.roomId}`);\n    }\n  }, [networkParam, networkRoomParam, history]);\n};\n\n// eslint-disable-next-line\nconst NetRoomList: FC = () => {\n  const { networkParam, networkRoomParam, setNetworkRoomParam } = useGlobalContext();\n  const invoke = useInvoke();\n  const netRooms = useNetRooms();\n  const { disconnect } = useConnectToServer();\n\n  useRedirect(networkParam, networkRoomParam);\n\n  const createRoom = useCallback(\n    (name: string): void => {\n      invoke<CreateRoomBean, CreateRoomId>(CREATE_ROOM, {\n        factions: [0, 1, 2, 3, 4, 5],\n        myFaction: 3,\n        name,\n      }).then(res => {\n        setNetworkRoomParam({\n          iAmMaster: true,\n          myFaction: 3,\n          roomId: res.roomId,\n        } as NetworkRoomParamType);\n      });\n    },\n    [invoke, setNetworkRoomParam],\n  );\n\n  const joinRoom = useCallback(\n    (roomId: string, myFaction: FactionIdentity): void => {\n      invoke<JoinRoomBean, RoomDetailMessage>(JOIN_ROOM_REQUEST, {\n        myFaction,\n        roomId,\n      }).then(() => {\n        setNetworkRoomParam({\n          iAmMaster: false,\n          myFaction,\n          roomId,\n        } as NetworkRoomParamType);\n      });\n    },\n    [invoke, setNetworkRoomParam],\n  );\n\n  return !networkParam ? (\n    <Redirect to=\"/network/connect\" />\n  ) : networkRoomParam ? (\n    <Redirect to={`/network/room/${networkRoomParam.roomId}`} />\n  ) : (\n    <>\n      <div className=\"netroom-container\">\n        {netRooms.map((room, index) => (\n          <NetRoomPreview key={index} roomInfo={room} onClickFreeSlot={joinRoom} />\n        ))}\n      </div>\n      <NetRoomCreator onCreateRoom={createRoom} onDisconnect={disconnect} />\n    </>\n  );\n};\n\nexport default NetRoomList;\n","import { useEffect, useState } from 'react';\nimport { RoomsMessage, RoomPreview, SYNC_SERVER_ROOMS, LIST_ROOMS_REQUEST } from 'checker-transfer-contract';\nimport { useGlobalContext, useInvoke } from './index';\n\nexport const useNetRooms = (): RoomPreview[] => {\n  const [rooms, setRooms] = useState<RoomPreview[]>([]);\n  const { networkParam } = useGlobalContext();\n  const invoke = useInvoke();\n\n  useEffect(() => {\n    if (!networkParam) {\n      return;\n    }\n\n    invoke<{}, RoomsMessage>(LIST_ROOMS_REQUEST, {}).then(msg => {\n      setRooms(msg.rooms);\n\n      const socket = networkParam.socket;\n\n      socket.on(SYNC_SERVER_ROOMS, (msg: RoomsMessage) => {\n        setRooms(msg.rooms);\n      });\n\n      return (): void => {\n        socket.removeEventListener(SYNC_SERVER_ROOMS);\n        return;\n      };\n    });\n  }, [networkParam, invoke]);\n\n  return rooms;\n};\n","import React, { FC, useCallback, useMemo, Dispatch } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { START_GAME, PREPARE_GAME, LEAVE_ROOM } from 'checker-transfer-contract';\nimport {\n  useGlobalContext,\n  NetworkRoomParamType,\n  useNetSlots,\n  useInvoke,\n  useNetRoomDetail,\n  GameMode,\n} from '../../hooks';\nimport Room from '../../components/Room';\n\nimport './index.scss';\n\nconst useStartOrPrepare = (\n  networkRoomParam: NetworkRoomParamType | null,\n  setNetworkRoomParam: Dispatch<NetworkRoomParamType>,\n  setGameMode: Dispatch<GameMode>,\n): (() => void) => {\n  const invoke = useInvoke();\n  const start = useCallback(() => invoke(START_GAME, {}), [invoke]);\n  const prepare = useCallback(() => {\n    if ((networkRoomParam || {}).isPrepared) {\n      return;\n    }\n    invoke(PREPARE_GAME, '/').then(() => {\n      setNetworkRoomParam({\n        ...networkRoomParam,\n        isPrepared: true,\n      } as NetworkRoomParamType);\n    });\n  }, [networkRoomParam, invoke, setNetworkRoomParam]);\n\n  return useCallback(() => {\n    if (networkRoomParam) {\n      networkRoomParam.iAmMaster ? start() : prepare();\n      setGameMode('network');\n    }\n  }, [networkRoomParam, prepare, start, setGameMode]);\n};\n\nconst useMiddleButtonText = (networkRoomParam: NetworkRoomParamType | null): string => {\n  return useMemo(() => {\n    if (!networkRoomParam) {\n      return '';\n    }\n    const { iAmMaster, isPrepared } = networkRoomParam as NetworkRoomParamType;\n    if (iAmMaster) {\n      return '开始';\n    } else if (isPrepared) {\n      return '已准备';\n    } else {\n      return '准备';\n    }\n  }, [networkRoomParam]);\n};\n\nconst NetRoom: FC = () => {\n  const { networkParam, networkRoomParam, setNetworkRoomParam, setGameMode } = useGlobalContext();\n  const netRoomDetail = useNetRoomDetail();\n  const slots = useNetSlots(netRoomDetail);\n  const startOrPrepare = useStartOrPrepare(networkRoomParam, setNetworkRoomParam, setGameMode);\n  const middleButtonText = useMiddleButtonText(networkRoomParam);\n  const invoke = useInvoke();\n\n  const leave = useCallback(() => {\n    invoke(LEAVE_ROOM, {}).then(() => {\n      setNetworkRoomParam(null);\n    });\n  }, [setNetworkRoomParam, invoke]);\n\n  return !networkParam ? (\n    <Redirect to=\"/network/connect\" />\n  ) : !networkRoomParam ? (\n    <Redirect to=\"/network/rooms\" />\n  ) : netRoomDetail && netRoomDetail.isProcessing ? (\n    <Redirect to=\"/game\" />\n  ) : (\n    <>\n      <div className=\"netroom-leave\" onClick={leave}>\n        离开房间\n      </div>\n      <Room middleButtonText={middleButtonText} onMiddleButtonClick={startOrPrepare} slots={slots} />\n    </>\n  );\n};\n\nexport default NetRoom;\n","import { useEffect, useState } from 'react';\nimport { isUndefined } from 'lodash-es';\nimport { RoomDetailMessage, ROOM_DETAIL, CreateRoomId, SYNC_ROOM_DETAIL } from 'checker-transfer-contract';\nimport { useGlobalContext, useInvoke } from './index';\nimport { NetworkRoomParamType } from './useGlobalContext';\n\nexport const useNetRoomDetail = (): RoomDetailMessage | null => {\n  const [detail, setDetail] = useState<RoomDetailMessage | null>(null);\n  const { networkParam, networkRoomParam, setNetworkRoomParam } = useGlobalContext();\n  const invoke = useInvoke();\n\n  useEffect(() => {\n    if (!networkParam || !networkRoomParam || !networkRoomParam.roomId) {\n      return;\n    }\n\n    invoke<CreateRoomId, RoomDetailMessage>(ROOM_DETAIL, { roomId: networkRoomParam.roomId })\n      .then(msg => {\n        setDetail(msg);\n\n        const socket = networkParam.socket;\n        socket.on(SYNC_ROOM_DETAIL, (msg: RoomDetailMessage) => {\n          setDetail(msg);\n        });\n\n        return (): void => {\n          socket.removeEventListener(SYNC_ROOM_DETAIL);\n          return;\n        };\n      })\n      .catch(() => {\n        setNetworkRoomParam(null);\n      });\n  }, [networkRoomParam, invoke, setNetworkRoomParam, networkParam]);\n\n  useEffect(() => {\n    const { myFaction, iAmMaster } = networkRoomParam || {};\n    if (detail && detail.players && !isUndefined(myFaction) && detail.players[myFaction]) {\n      if (detail.players[myFaction].isMaster !== iAmMaster) {\n        setNetworkRoomParam({\n          ...networkRoomParam,\n          iAmMaster: detail.players[myFaction].isMaster,\n        } as NetworkRoomParamType);\n      }\n    }\n  }, [detail, networkRoomParam, setNetworkRoomParam]);\n\n  return detail;\n};\n","import React, { FC } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport { Home, SingleRoom, Game, NetConnection, NetRoomList, NetRoom } from './pages';\nimport { GlobalContextProvider } from './hooks';\n\nimport './styles/index.scss';\n\nconst App: FC = () => {\n  return (\n    <div className=\"layout\">\n      <GlobalContextProvider>\n        <Router>\n          <Switch>\n            <Route path=\"/single/room\">\n              <SingleRoom />\n            </Route>\n            <Route path=\"/network/connect\">\n              <NetConnection />\n            </Route>\n            <Route path=\"/network/rooms\">\n              <NetRoomList />\n            </Route>\n            <Route path=\"/network/room/:id\">\n              <NetRoom />\n            </Route>\n            <Route path=\"/game\">\n              <Game />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </GlobalContextProvider>\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { COLOR_NEUTRAL, COLOR_SLOT_1, COLOR_SLOT_2, COLOR_SLOT_3, COLOR_PIECE_1, COLOR_PIECE_2, COLOR_PIECE_3, COLOR_PIECE_4, COLOR_PIECE_5, COLOR_PIECE_6, COLOR_FOCUS, COLOR_MENTION, } from '../canvas/constants';\nexport const R_MAX = 18;\nexport const R_FOCUS = 15;\nexport const R_SLOT = 12;\nexport const R_PIECE = 9;\nexport const SLOT_COLOR_DICT = {\n    unavailable: -1,\n    neutral: COLOR_NEUTRAL,\n    0: COLOR_SLOT_1,\n    1: COLOR_SLOT_2,\n    2: COLOR_SLOT_3,\n};\nexport const STATUS_COLOR_DICT = {\n    normal: -1,\n    focus: COLOR_FOCUS,\n    mention: COLOR_MENTION,\n};\nexport const PIECE_COLOR_DICT = {\n    0: COLOR_PIECE_1,\n    1: COLOR_PIECE_2,\n    2: COLOR_PIECE_3,\n    3: COLOR_PIECE_4,\n    4: COLOR_PIECE_5,\n    5: COLOR_PIECE_6,\n};\n//# sourceMappingURL=constants.js.map","export * from './types';\nexport * from './board';\nexport * from './piece';\n//# sourceMappingURL=index.js.map","import { EventEmitter } from 'events';\nimport { isEqual } from 'lodash-es';\nexport class AbstractElement extends EventEmitter {\n    constructor(props, canvas) {\n        super();\n        this.updated = true;\n        this.props = props;\n        this.canvas = canvas;\n    }\n    getProps() {\n        return this.props;\n    }\n    getCanvas() {\n        return this.canvas;\n    }\n    updateProps(props) {\n        if (!this.checkUpdate(this.props, props)) {\n            return false;\n        }\n        this.props = props;\n        this.updated = true;\n        return true;\n    }\n    render() {\n        if (!this.updated) {\n            return true;\n        }\n        if (this.renderView()) {\n            this.updated = false;\n            return true;\n        }\n        return false;\n    }\n    checkUpdate(props, nextProps) {\n        return !isEqual(props, nextProps);\n    }\n}\n//# sourceMappingURL=abstract-element.js.map","export * from './types';\nexport * from './html-2d';\nexport * from './constants';\n//# sourceMappingURL=index.js.map","export * from './types';\nexport * from './faction';\n//# sourceMappingURL=index.js.map","import { AbstractElement } from './abstract-element';\nexport class AbstractView extends AbstractElement {\n    constructor(props, canvas, elements) {\n        super(props, canvas);\n        this.elements = [];\n        this.elements = elements;\n    }\n    getChildren() {\n        return this.elements;\n    }\n    render() {\n        let success = super.render();\n        this.elements.forEach(element => {\n            if (!success) {\n                return;\n            }\n            success = success && element.render();\n        });\n        return success;\n    }\n}\n//# sourceMappingURL=abstract-view.js.map","import { AbstractElement } from './abstract-element';\nimport { COLOR_PIECE_OBSTACLE, COLOR_CLEAR } from '../canvas';\nimport { R_SLOT, SLOT_COLOR_DICT, PIECE_COLOR_DICT, STATUS_COLOR_DICT, R_PIECE, R_MAX, R_FOCUS } from './constants';\nexport class SlotElement extends AbstractElement {\n    constructor(slot, canvas) {\n        super(slot, canvas);\n    }\n    renderView() {\n        const props = this.getProps();\n        if (props.slotCategory === 'unavailable') {\n            return true;\n        }\n        return this.clearArea() && this.renderSlot() && this.renderPiece() && this.renderStatus();\n    }\n    checkUpdate(props, nextProps) {\n        if (props.status !== nextProps.status) {\n            return true;\n        }\n        if ((props.piece === null && nextProps.piece !== null) || (props.piece !== null && nextProps.piece === null)) {\n            return true;\n        }\n        if (props.piece !== null && nextProps.piece !== null) {\n            return props.piece.getFactionId() !== nextProps.piece.getFactionId();\n        }\n        return false;\n    }\n    clearArea() {\n        const props = this.getProps();\n        const canvas = this.getCanvas();\n        if (!canvas.setColor(COLOR_CLEAR)) {\n            return false;\n        }\n        return canvas.setFillMode('fill').circle(props.coordinate, R_MAX);\n    }\n    renderSlot() {\n        const props = this.getProps();\n        const canvas = this.getCanvas();\n        if (!canvas.setColor(SLOT_COLOR_DICT[props.slotCategory])) {\n            return false;\n        }\n        return canvas.setFillMode('stroke').circle(props.coordinate, R_SLOT);\n    }\n    renderPiece() {\n        const canvas = this.getCanvas();\n        const props = this.getProps();\n        const piece = props.piece;\n        if (piece === null) {\n            return true;\n        }\n        const factionId = piece.getFactionId();\n        if (factionId === null && !canvas.setColor(COLOR_PIECE_OBSTACLE)) {\n            return false;\n        }\n        if (!canvas.setColor(PIECE_COLOR_DICT[factionId])) {\n            return false;\n        }\n        return canvas.setFillMode('fill').circle(props.coordinate, R_PIECE);\n    }\n    renderStatus() {\n        const canvas = this.getCanvas();\n        const props = this.getProps();\n        if (props.status === 'normal' || props.status === 'mention') {\n            return true;\n        }\n        if (!canvas.setColor(STATUS_COLOR_DICT[props.status])) {\n            return false;\n        }\n        return canvas.setFillMode('stroke').circle(props.coordinate, R_FOCUS);\n    }\n}\n//# sourceMappingURL=slot-element.js.map","import { stepDistance } from '../utils';\nexport class InOutCalculator {\n    constructor() {\n        this.emptyGoals = [];\n    }\n    updateBoardAndFaction(board, faction) {\n        this.board = board;\n        this.faction = faction;\n        this.updateEmptyGoals();\n    }\n    getScore(step) {\n        return this.isInnerPiece(step.from) ? this.getInnerPieceMaxStep(step) : this.getOuterPieceMaxStep(step);\n    }\n    getInnerPieceMaxStep(step) {\n        return stepDistance([this.faction.getGoalCoordinates()[0]], step.from, step.to);\n    }\n    getOuterPieceMaxStep(step) {\n        const { from, to } = step;\n        const stepDist = stepDistance(this.emptyGoals, from, to);\n        return stepDist;\n    }\n    isInnerPiece(coord) {\n        var _a;\n        return ((_a = this.faction) === null || _a === void 0 ? void 0 : _a.isGoalCoordinate(coord)) || false;\n    }\n    updateEmptyGoals() {\n        var _a;\n        const goals = ((_a = this.faction) === null || _a === void 0 ? void 0 : _a.getGoalCoordinates()) || [];\n        this.emptyGoals = goals.filter(goal => {\n            var _a, _b;\n            const piece = (_a = this.board) === null || _a === void 0 ? void 0 : _a.get(goal);\n            return piece === null || piece.getFactionId() !== ((_b = this.faction) === null || _b === void 0 ? void 0 : _b.getId());\n        });\n    }\n}\n//# sourceMappingURL=in-out-calculator.js.map","export * from './complicated-calculator';\nexport * from './simple-calculator';\nexport * from './in-out-calculator';\n//# sourceMappingURL=index.js.map","export const STATUS_OK = 200;\nexport const STATUS_ERROR = 500;\nexport const CHECK_VALID_PATH = '/check';\nexport const SOCKET_PATH = '/chess';\n//# sourceMappingURL=base.js.map","export const SYNC_CLIENT = 'client';\nexport const SYNC_SERVER_ROOMS = 'rooms';\nexport const SYNC_ROOM_DETAIL = 'detail';\nexport var ClientStatus;\n(function (ClientStatus) {\n    ClientStatus[ClientStatus[\"Free\"] = 0] = \"Free\";\n    ClientStatus[ClientStatus[\"Preparing\"] = 1] = \"Preparing\";\n    ClientStatus[ClientStatus[\"Gaming\"] = 2] = \"Gaming\";\n})(ClientStatus || (ClientStatus = {}));\nexport const SYNC_GAME = 'game';\n//# sourceMappingURL=message.js.map","// create room\nexport const CREATE_ROOM = '/room/create';\n// list rooms\nexport const LIST_ROOMS_REQUEST = '/room/list';\n// join room\nexport const JOIN_ROOM_REQUEST = '/room/join';\n// leave room\nexport const LEAVE_ROOM = '/room/leave';\n// room detail\nexport const ROOM_DETAIL = '/room/detail';\n// prepare game\nexport const PREPARE_GAME = '/game/prepare';\n// start game\nexport const START_GAME = '/game/start';\nexport const GAME_STATUS = '/game/status';\n// move a chess\nexport const MOVE_CHESS = '/game/move';\n//# sourceMappingURL=restapi.js.map","import { CheckerView } from 'checker-view';\nexport class CheckerViewGui extends CheckerView {\n    constructor(board, canvas) {\n        super(board, canvas);\n    }\n    convert(coord) {\n        return coord;\n    }\n    reconvert(coord) {\n        return coord;\n    }\n}\n//# sourceMappingURL=checker-view-gui.js.map","import { isEmpty, isEqual, isUndefined } from 'lodash-es';\nimport { GameModel } from 'checker-model';\nimport { HTMLCanvas2d } from 'checker-view';\nimport { CheckerViewGui } from './checker-view-gui';\nexport class AbstractCheckerGameGui {\n    constructor(props) {\n        this.handler = (coordinate) => {\n            if (this.model.getStatus() !== 'running' || !this.isMyTurn()) {\n                return;\n            }\n            this.onClick(coordinate);\n            if (isUndefined(this.focus)) {\n                this.setFocus(coordinate);\n                return;\n            }\n            if (isEqual(this.focus, coordinate)) {\n                return;\n            }\n            const mentions = this.mentions;\n            if (isEmpty(mentions) || mentions.find(mention => isEqual(mention, coordinate)) === undefined) {\n                this.removeFocusAndMentions() && this.setFocus(coordinate);\n                return;\n            }\n            return this.moveByMyself(coordinate)\n                .then(moveStep => this.move(moveStep))\n                .then(() => this.go());\n        };\n        const { canvasElement, aiPlayers, players, myFactionId } = props;\n        this.canvas = new HTMLCanvas2d(canvasElement);\n        this.aiPlayers = aiPlayers;\n        this.myFactionId = myFactionId;\n        this.model = new GameModel(players);\n        this.view = new CheckerViewGui(this.model.getBoard(), this.canvas);\n        this.view.onClick(this.handler);\n    }\n    start() {\n        if (!this.model.start()) {\n            return false;\n        }\n        if (!this.view.render()) {\n            return false;\n        }\n        this.onGameStart();\n        this.go();\n        return true;\n    }\n    go() {\n        // check whether current player wins\n        if (this.isCurrentPlayerWins()) {\n            this.onGameWin(this.model.getCurrentPlayer().faction.getId());\n        }\n        // check whether game ends\n        if (this.model.getStatus() === 'end') {\n            this.onGameEnd();\n            return;\n        }\n        // check whether it's my turn\n        if (this.isMyTurn()) {\n            return;\n        }\n        this.moveByOthers()\n            .then(moveStep => this.move(moveStep))\n            .then(() => this.go());\n    }\n    move(moveStep) {\n        const { from, to } = moveStep;\n        // update checker model and checker view\n        if (!this.model.getBoard().move(from, to) || !this.view.updateProps(this.model.getBoard()) || !this.view.render()) {\n            return false;\n        }\n        this.onChessMove(this.model.getBoard().getActionList());\n        this.model.updateStatus();\n        return true;\n    }\n    moveByMyself(to) {\n        const from = this.focus;\n        this.focus = undefined;\n        this.mentions = undefined;\n        return Promise.resolve({ from, to, piece: this.model.getBoard().get(from) });\n    }\n    isMyTurn() {\n        return this.model.getCurrentPlayer().faction.getId() === this.myFactionId;\n    }\n    isCurrentPlayerWins() {\n        return this.model.getCurrentPlayer().faction.checkWin();\n    }\n    setFocus(coord) {\n        const view = this.view;\n        const model = this.model;\n        // adding focus\n        if (!view.setFocusStatus(coord, 'focus')) {\n            return false;\n        }\n        this.focus = coord;\n        // adding mentions\n        const piece = model.getBoard().get(coord);\n        if (piece !== null && piece.getFactionId() === model.getCurrentPlayer().faction.getId()) {\n            this.mentions = model.getBoard().getAvailableJumpPosition(coord);\n            this.mentions.forEach(mentionCoord => {\n                view.setFocusStatus(mentionCoord, 'mention');\n            });\n        }\n        return true;\n    }\n    removeFocusAndMentions() {\n        const view = this.view;\n        let status = view.setFocusStatus(this.focus, 'normal');\n        this.focus = undefined;\n        if (!isEmpty(this.mentions)) {\n            this.mentions.forEach(mentionCoord => {\n                status = status && view.setFocusStatus(mentionCoord, 'normal');\n            });\n            this.mentions = undefined;\n        }\n        return status;\n    }\n}\n//# sourceMappingURL=abstract-game.js.map","export * from './abstract-game';\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}